{"code":"// Test enhanced array methods for Phase 3\n\nvar numbers = [1, 2, 3, 4, 5];\n\n// Test find method\nvar found = numbers.find(function(n) { return n > 3; });\n\n// Test includes method\nvar hasThree = numbers.includes(3);\n\n// Test method chaining\nvar result = numbers\n  .filter(function(n) { return n % 2 === 0; })\n  .map(function(n) { return n * 2; });\n\n// Test flatMap if available\nvar nested = [[1, 2], [3, 4]];\ntry {\n  var flattened = nested.flatMap ? nested.flatMap(function(arr) { return arr; }) : 'flatMap not available';\n} catch (e) {\n  var flattened = 'flatMap error: ' + e.message;\n}","trace":[{"line":1,"event":"step_line","func_name":"<module>","globals":{},"ordered_globals":[],"stack_to_render":[],"heap":{},"stdout":""},{"line":6,"event":"step_line","func_name":"<module>","globals":{"numbers":["LIST",1,2,3,4,5],"found":4},"ordered_globals":["numbers","found"],"stack_to_render":[],"heap":{},"stdout":""},{"line":9,"event":"step_line","func_name":"<module>","globals":{"numbers":["LIST",1,2,3,4,5],"found":4,"hasThree":true},"ordered_globals":["numbers","found","hasThree"],"stack_to_render":[],"heap":{},"stdout":""},{"line":14,"event":"step_line","func_name":"<module>","globals":{"numbers":["LIST",1,2,3,4,5],"found":4,"hasThree":true,"result":["LIST",4,8]},"ordered_globals":["numbers","found","hasThree","result"],"stack_to_render":[],"heap":{},"stdout":""},{"line":18,"event":"step_line","func_name":"<module>","globals":{"numbers":["LIST",1,2,3,4,5],"found":4,"hasThree":true,"result":["LIST",4,8],"nested":["LIST",["LIST",1,2],["LIST",3,4]]},"ordered_globals":["numbers","found","hasThree","result","nested"],"stack_to_render":[],"heap":{},"stdout":""},{"line":19,"event":"step_line","func_name":"<module>","globals":{"numbers":["LIST",1,2,3,4,5],"found":4,"hasThree":true,"result":["LIST",4,8],"nested":["LIST",["LIST",1,2],["LIST",3,4]],"flattened":["LIST",1,2,3,4]},"ordered_globals":["numbers","found","hasThree","result","nested","flattened"],"stack_to_render":[],"heap":{},"stdout":""},{"line":22,"event":"step_line","func_name":"<module>","globals":{"numbers":["LIST",1,2,3,4,5],"found":4,"hasThree":true,"result":["LIST",4,8],"nested":["LIST",["LIST",1,2],["LIST",3,4]],"flattened":["LIST",1,2,3,4]},"ordered_globals":["numbers","found","hasThree","result","nested","flattened"],"stack_to_render":[],"heap":{},"stdout":""}]}
